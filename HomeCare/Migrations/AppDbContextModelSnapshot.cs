// <auto-generated />
using System;
using HomeCare.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HomeCare.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            // === USERS ===
            modelBuilder.Entity("HomeCare.Models.User", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<string>("Address")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<string>("FullName")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<string>("PasswordHash")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<string>("Role")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<string>("TlfNumber")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.HasKey("Id");

                b.ToTable("Users");
            });

            // === AVAILABLE DATES ===
            modelBuilder.Entity("AvailableDate", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<DateTime>("Date")
                    .HasColumnType("TEXT");

                b.HasKey("Id");

                b.ToTable("AvailableDates");

                b.HasData(
                    new { Id = 1, Date = new DateTime(2025, 12, 15) },
                    new { Id = 2, Date = new DateTime(2025, 12, 16) },
                    new { Id = 3, Date = new DateTime(2025, 12, 17) }
                );
            });

            // === CATEGORIES ===
            modelBuilder.Entity("Category", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.HasKey("Id");

                b.ToTable("Categories");

                b.HasData(
                    new { Id = 1, Name = "Cleaning" },
                    new { Id = 2, Name = "Nursing" },
                    new { Id = 3, Name = "Cooking" },
                    new { Id = 4, Name = "OTHER" }
                );
            });

            // === APPOINTMENTS ===
            modelBuilder.Entity("HomeCare.Models.Appointment", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<int>("CategoryId")
                    .HasColumnType("INTEGER");

                b.Property<DateTime>("DateTime")
                    .HasColumnType("TEXT");

                b.Property<string>("Notes")
                    .HasColumnType("TEXT");

                b.Property<int>("TimeSlotId")
                    .HasColumnType("INTEGER");

                b.HasKey("Id");

                b.HasIndex("CategoryId");
                b.HasIndex("TimeSlotId");

                b.ToTable("Appointments");
            });

            // === BOOKING OPTIONS ===
            modelBuilder.Entity("HomeCare.Models.BookingOption", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<DateTime>("AvailableDate")
                    .HasColumnType("TEXT");

                b.Property<string>("Category")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<string>("TimeSlot")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.HasKey("Id");

                b.ToTable("BookingOptions");
            });

            // === TIME SLOTS ===
            modelBuilder.Entity("TimeSlot", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<int>("AvailableDateId")
                    .HasColumnType("INTEGER");

                b.Property<bool>("IsBooked")
                    .HasColumnType("INTEGER");

                b.Property<string>("Slot")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.HasKey("Id");

                b.HasIndex("AvailableDateId");

                b.ToTable("TimeSlots");

                b.HasData(
                    new { Id = 1, AvailableDateId = 1, IsBooked = false, Slot = "09:00-10:00" },
                    new { Id = 2, AvailableDateId = 1, IsBooked = false, Slot = "10:00-11:00" },
                    new { Id = 3, AvailableDateId = 1, IsBooked = false, Slot = "11:00-12:00" },
                    new { Id = 4, AvailableDateId = 1, IsBooked = false, Slot = "13:00-14:00" },
                    new { Id = 5, AvailableDateId = 2, IsBooked = false, Slot = "14:00-15:00" },
                    new { Id = 6, AvailableDateId = 3, IsBooked = false, Slot = "09:00-10:00" },
                    new { Id = 7, AvailableDateId = 3, IsBooked = false, Slot = "10:00-11:00" }
                );
            });

            // === RELATIONSHIPS ===
            modelBuilder.Entity("HomeCare.Models.Appointment", b =>
            {
                b.HasOne("Category", "Category")
                    .WithMany()
                    .HasForeignKey("CategoryId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("TimeSlot", "TimeSlot")
                    .WithMany()
                    .HasForeignKey("TimeSlotId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Category");
                b.Navigation("TimeSlot");
            });

            modelBuilder.Entity("TimeSlot", b =>
            {
                b.HasOne("AvailableDate", "AvailableDate")
                    .WithMany("TimeSlots")
                    .HasForeignKey("AvailableDateId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("AvailableDate");
            });

            modelBuilder.Entity("AvailableDate", b =>
            {
                b.Navigation("TimeSlots");
            });
#pragma warning restore 612, 618
        }
    }
}
